c(1,3,4.5)   # Collect three values in a vector.
c("a","ab")  # Collect two strings in a vector.
c(T,F,T)     # Collect three logical values in a vector.
c(2.1,T)     # Not an error.  Coercion of T to 1.
c(2,"a",T)   # Not an error.  Coercion of 1 and T to strings.
a <- c(1,3,5)
a[1]; a[2]; a[3]
a[c(1,3)]
a[c(1,3)]
a <- c(1,3,5)
a[1]; a[2]; a[3]
#     (This is unlike Python and C which use ZERO-based indexing.)
#   - Vector indexes:
a[c(1,3)]
b <- c(1,3);  a[b]
a[c(1,2,1,2,1,1,1,3,3,3)]
a[-1]
d <- a[-1]
a[c(-1,-3)]
b <- c(-1,-3);  a[b]  # dito
a <- a[-1]       # Actually remove the first element of 'a'.
#   - Logical selection:
a <- c(1,3,5)
a[c(T,F,T)]
b <- c(T,F,T);  a[b]  # dito
a>2; a[a>2]      # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
b <- (a>2);  a[b]  # dito
a[F]             # c(F,F,F)   'F' is repeated 3 times
a[F]             # c(F,F,F)   'F' is repeated 3 times
a[T]             # c(T,T,T)
a[c(T,F)]        # c(T,F,T)
a[c(T,T,F,F,F)]  # If too long, the index vector is truncated.
(1:12)[c(T,T,F)] # Leave out every third item.
a[c(1,3)][2]     # Select item two of a[c(1,3)], i.e. item 3 of 'a'.
a[c(1,3)][c(1,2,1,2)]
a[1:2] <- c(10,20);  a    # Print 'a' to see the effect of the assignment.
a[c(1,3)] <- c(100,200);  a
a[-2] <- c(1000,2000);  a
a[c(F,T,T)] <- c(10000,20000);  a
a[2:3] <- 0;  a    # "0" is repeated to fill both vector elements.
b <- 1:10
b[3:6] <- c(10,20); b # "c(10,20)" is cyclically repeated.
install.packages('installr')
require(installr)
updateR()
install.packages(leaps)
install.packages('leaps')
install.packages(ISLR)
install.packages("ISLR")
install.packages("MASS")
install.packages("lattice")
install.packages("ggplot2")
install.packages("pROC")
install.packages("class")
library(leaps)
library(class)
library(ISLR)
library(MASS)  # load package MASS
library(lattice) # xyplot(), bwplot()
library(ggplot2)
library(plotrix)
library(pROC)
library(glmnet)
library(LiblineaR)
install.packages('plotrix')
rm(list=ls()) # Remove all the existing variables
# dir=c("/Users/Benson/Desktop/stat471_final_proj")
dir=c("C:\\Users\\Kevin\\Documents\\University of Pennsylvania\\FALL 2015\\STAT 471\\Final Project\\code")
setwd(dir)
set.seed(37)
lol_data <- read.csv("new_lol_data.csv", header=T, stringsAsFactors=T, as.is=T,
na.strings="")
lol_data = na.omit(lol_data)
lol_data
summary(lol_data)
dim(lol_data)
dir=c("C:\\Users\\Kevin\\Documents\\University of Pennsylvania\\FALL 2015\\STAT 471\\Final Project\\code")
setwd(dir)
set.seed(37)
data_champs <- read.csv("data_champs.csv", header=T, stringsAsFactors=T, as.is=T,
na.strings="")
data_stats <- read.csv("data_stats.csv", header=T, stringsAsFactors=T, as.is=T,
na.strings="")
pos = abs(data_champs)
pos_sums = colSums(pos)
names(pos_sums) = names(pos)
hist(pos_sums, main="Histogram of Number of Champion Plays", xlab="Number of Champion Plays", ylab="Frequency", breaks=20, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
Top_MPM_0_10 = data_stats$TOP_zeroToTenCreeps_1 - data_stats$TOP_zeroToTenCreeps_2
Top_MPM_10_20 = data_stats$TOP_tenToTwentyCreeps_1 - data_stats$TOP_tenToTwentyCreeps_2
Mid_MPM_0_10 = data_stats$MIDDLE_zeroToTenCreeps_1 - data_stats$MIDDLE_zeroToTenCreeps_2
Mid_MPM_10_20 = data_stats$MIDDLE_tenToTwentyCreeps_1 - data_stats$MIDDLE_tenToTwentyCreeps_2
ADC_MPM_0_10 = data_stats$DUO_CARRY_zeroToTenCreeps_1 - data_stats$DUO_CARRY_zeroToTenCreeps_2
ADC_MPM_10_20 = data_stats$DUO_CARRY_tenToTwentyCreeps_1 - data_stats$DUO_CARRY_tenToTwentyCreeps_2
jungle_camps_diff = data_stats$neutral_jungle_1 - data_stats$neutral_jungle_2
minions_data = data.frame(Top_MPM_0_10, Top_MPM_10_20, Mid_MPM_0_10, Mid_MPM_10_20, ADC_MPM_0_10, ADC_MPM_10_20, jungle_camps_diff)
jg_total_wards_bought_1 = data_stats$sight_jungle_1+data_stats$vision_jungle_1
jg_total_wards_bought_2 = data_stats$sight_jungle_2+data_stats$vision_jungle_2
jg_total_wards_bought_diff = jg_total_wards_bought_1 - jg_total_wards_bought_2
jg_total_wards_placed_diff = data_stats$wards_placed_jungle_1 - data_stats$wards_placed_jungle_2
jg_total_wards_killed_diff = data_stats$wards_killed_jungle_1 - data_stats$wards_killed_jungle_2
# Support ward variables
supp_total_wards_bought_1 = data_stats$sight_support_1 + data_stats$vision_support_1
supp_total_wards_bought_2 = data_stats$sight_support_2 + data_stats$vision_support_2
supp_total_wards_bought_diff = supp_total_wards_bought_1 - supp_total_wards_bought_2
supp_total_wards_placed_diff = data_stats$wards_placed_support_1 - data_stats$wards_placed_support_2
supp_total_wards_killed_diff = data_stats$wards_killed_support_1 - data_stats$wards_killed_support_2
wards_data = data.frame(jg_total_wards_bought_diff, jg_total_wards_placed_diff, jg_total_wards_killed_diff, supp_total_wards_bought_diff, supp_total_wards_placed_diff, supp_total_wards_killed_diff)
named_wards_data = wards_data
names(named_wards_data) = c("Jungle Wards Bought Diff", "Jungle Wards Placed Diff", "Jungle Wards Killed Diff", "Support Wards Bought Diff", "Support Wards Placed Diff", "Support Wards Killed Diff")
pairs(named_wards_data)
first_blood_data = data.frame(data_stats$firstBlood)
dragon_1 = data_stats$dragon_1
dragon_2 = data_stats$dragon_2
baron_1 = data_stats$baron_1
baron_2 = data_stats$baron_2
dragon_baron_data = data.frame(dragon_1, dragon_2, baron_1, baron_2)
par(mfrow=c(1,2))
hist(dragon_1, main = "Histogram of Dragon Kills for Team 1", xlab ="Number of Dragon Kills", cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(dragon_2, main = "Histogram of Dragon Kills for Team 2", xlab ="Number of Dragon Kills", cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(baron_1, main = "Histogram of Baron Kills for Team 1", xlab ="Number of Baron Kills", cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(baron_2, main = "Histogram of Baron Kills for Team 2", xlab ="Number of Baron Kills", cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
par(mfrow=c(1,1))
x_data = cbind(data_champs, minions_data, wards_data, first_blood_data, dragon_baron_data)
winner = data_stats$winner
y_data = data.frame(winner)
x_mat = model.matrix(championId_266~., data=x_data)
y_mat = model.matrix(~., data=y_data)[, 2]
fit.cv_default = cv.glmnet(x_mat, y_mat, family="binomial", alpha=1.0, nfolds=10, type.measure="class")
plot(fit.cv_default, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
new_lambda = exp(-3.8)
fit.select = glmnet(x_mat, y_mat, family="binomial", alpha=1.0, lambda = new_lambda)
fit.beta = coef(fit.select)
firstBlood = data_stats$firstBlood
first_blood_data = data.frame(firstBlood)
train_index = sample(3000, size = 2000)
x_train = x_data[train_index, ]
y_train = y_data[train_index, ]
x_test = x_data[-train_index, ]
y_test = y_data[-train_index, ]
lr_model = glm(y_train~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2,family=binomial(logit), data=x_train)
lr_model_reduced = glm(y_train~Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2,family=binomial(logit), data=x_train)
#likelihood ratio test:
1-pchisq(lr_model_reduced$deviance-lr_model$deviance, lr_model_reduced$df.residual-lr_model$df.residual)
lr_model.predict = predict(lr_model_reduced, x_test, type="response")
lr_class_labels = (lr_model.predict > 0.5) + 0
lr_model.roc=roc(y_test, lr_model.predict, plot=T)
lr_model.roc$auc
lr_model = glm(y_train~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2,family=binomial(logit), data=x_train)
firstBlood = data_stats$firstBlood
first_blood_data = data.frame(firstBlood)
dragon_1 = data_stats$dragon_1
dragon_2 = data_stats$dragon_2
baron_1 = data_stats$baron_1
baron_2 = data_stats$baron_2
dragon_baron_data = data.frame(dragon_1, dragon_2, baron_1, baron_2)
par(mfrow=c(1,2))
hist(dragon_1, main = "Histogram of Dragon Kills for Team 1", xlab ="Number of Dragon Kills", cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(dragon_2, main = "Histogram of Dragon Kills for Team 2", xlab ="Number of Dragon Kills", cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(baron_1, main = "Histogram of Baron Kills for Team 1", xlab ="Number of Baron Kills", cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
hist(baron_2, main = "Histogram of Baron Kills for Team 2", xlab ="Number of Baron Kills", cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
par(mfrow=c(1,1))
x_data = cbind(data_champs, minions_data, wards_data, first_blood_data, dragon_baron_data)
winner = data_stats$winner
y_data = data.frame(winner)
x_mat = model.matrix(championId_266~., data=x_data)
y_mat = model.matrix(~., data=y_data)[, 2]
fit.cv_default = cv.glmnet(x_mat, y_mat, family="binomial", alpha=1.0, nfolds=10, type.measure="class")
plot(fit.cv_default, cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
new_lambda = exp(-3.8)
fit.select = glmnet(x_mat, y_mat, family="binomial", alpha=1.0, lambda = new_lambda)
fit.beta = coef(fit.select)
```
```{r train_test =FALSE}
train_index = sample(3000, size = 2000)
x_train = x_data[train_index, ]
y_train = y_data[train_index, ]
x_test = x_data[-train_index, ]
y_test = y_data[-train_index, ]
lr_model = glm(y_train~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2,family=binomial(logit), data=x_train)
lr_model_reduced = glm(y_train~Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2,family=binomial(logit), data=x_train)
#likelihood ratio test:
1-pchisq(lr_model_reduced$deviance-lr_model$deviance, lr_model_reduced$df.residual-lr_model$df.residual)
lr_model.predict = predict(lr_model_reduced, x_test, type="response")
lr_class_labels = (lr_model.predict > 0.5) + 0
lr_model.roc=roc(y_test, lr_model.predict, plot=T)
lr_model.roc$auc
library(tree)
library(randomForest)
rf_model <- randomForest(y_train ~ Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_train, mtry=10, ntree=500)
str(rf_model)
summary(fit.rf)
summary(fit_model)
summary(rf_model)
plot(rf_model)
rf_model <- randomForest(y_data~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_data, mtry=10, ntree=500)
rf_model <- randomForest(y_mat~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_data, mtry=10, ntree=500)
y_mat
str(y_mat)
str(as.factor(y_mat)
str(as.factor(y_mat))
str(as.factor(y_mat))
y_mat <- as.factor(y_mat)
rf_model <- randomForest(y_mat~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_data, mtry=10, ntree=500)
str(rf_model)
summary(rf_model)
plot(rf_model)
summary(rf_model)
str(rf_model)
plot(rf_model)
plot(rf_model)
plot(rf_model)
legend("top", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
y_mat <- as.numeric(y_mat)
rf_model <- randomForest(y_mat~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_data, mtry=10, ntree=500)
str(rf_model)
summary(rf_model)
plot(rf_model)
legend("top", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
y_mat <- as.factor(y_mat)
rf_model <- randomForest(y_mat~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_data, mtry=10, ntree=500)
summary(rf_model)
plot(rf_model)
legend("top", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
y_mat[1]
y_mat <- as.numeric(y_mat)
y_mat[1]
y_mat = model.matrix(~., data=y_data)[, 2]
rf_model <- randomForest(y_mat~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_data, mtry=10, ntree=500)
str(rf_model)
summary(rf_model)
plot(rf_model)
legend("top", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
rf_model <- randomForest(y_mat~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_data, mtry=10, ntree=500)
class(y_mat)
y_class <- as.factor(y_mat)
y_class <- as.factor(y_mat)
y_class
class(y_class)
rf_model <- randomForest(y_mat~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_data, mtry=10, ntree=500)
rf_model <- randomForest(y_class~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_data, mtry=10, ntree=500)
plot(rf_model)
legend("top", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
roc(rf_model)
source('~/.active-rstudio-document', echo=TRUE)
importance(rf_model)
print(rf_model)
plot(rf_model$mse, xlab="number of trees",
ylab="ave mse up to i many trees",
pch=16) # We only need about 100 trees for this
# the above plot can be done by
plot(fit.rf)
plot(rf_model$mse, xlab="number of trees",
ylab="ave mse up to i many trees",
pch=16) # We only need about 100 trees for this
plot(rf_model)
legend("top", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
legend("right", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
plot(rf_model)
legend("topright", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
y_class[1]
plot(rf_model, main="MCE vs. Number of Trees")
legend("topright", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
y_class_train <- as.factor(y_train)
y_class_test <- as.factor(y_test)
rf_model <- randomForest(y_class~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_data, mtry=10, ntree=500)
y_class_train <- as.factor(y_train)
y_class_test <- as.factor(y_test)
rf_model <- randomForest(y_train~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_data, mtry=10, ntree=500)
# Plot the Random Forest to see the optimal number of trees
plot(rf_model, main="MCE vs. Number of Trees")
legend("topright", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
print(rf_model)
rf_model.predict <- predict(rf_model, x_test, type="response")
roc(y_test, rf_modeL.predict, plot=T)
roc(y_test, rf_model.predict, plot=T)
rf_model.predic
rf_model.predict
roc(y_test, rf_model.predict, plot=T)
roc(y_class_test, rf_model.predict, plot=T)
rf_model.predict <- predict(rf_model, x_test, probability=TRUE)
rf_model.predict
attr(lr.pred,"probabilities")
attr(rf_model.predict,"probabilities")
rf_model.predict <- predict(rf_model, x_test, probability=TRUE)
attr(rf_model.predict,"probabilities")
rf_model.predict
attr(rf_mode.predict)
str(rf_model.predict)
attr(rf_model.predict)
attr(rf_model.predict)[1]
attr(rf_model.predict)[2]
attr(rf_model.predict, "probability")
attr(rf_model.predict, "probabilities")
rf_model.predict <- predict(rf_model, x_test, prob=TRUE)
attr(rf_model.predict)$prob
rf_model.predict <- predict(rf_model, x_test, prob=TRUE)
attr(rf_model.predict)$prob
attr(rf_model.predict)$prob
prob
attr(rf_model.predict)
str(rf_model.predict)
names(rf_model.predict)
names(rf_model.predict)
names(attr(rf_model.predict)
)
names(attr(rf_model.predict))
rf_model.predict <- predict(rf_model, x_test, prob=TRUE)
rf_model.predict$posterior
names(rf_model.predict)
rf_model.predict <- predict(rf_model, x_test, prob=TRUE)
attr(rf_model.predict)$prob
rf_model.predict <- predict(rf_model, x_test, prob=TRUE)
print(rf_model)
mean(rf_model.predict == y_class_test)
sum(rf_model.predict != y_class_test)
sum(rf_model.predict ~= y_class_test)
rf_model.predict
y_class_test
rf_model.predict
x_test
rf_model.predict <- predict(rf_model, x_test, prob=TRUE)
rf_model.predict
rf_model
y_class <- as.factor(y_mat)
y_class_train <- as.factor(y_train)
y_class_test <- as.factor(y_test)
rf_model <- randomForest(y_train~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_train, mtry=10, ntree=500)
rf_model <- randomForest(y_class_train~Top_MPM_0_10+Top_MPM_10_20+Mid_MPM_10_20+ADC_MPM_0_10+ADC_MPM_10_20+jungle_camps_diff+supp_total_wards_placed_diff+firstBlood+dragon_1+dragon_2+baron_1+baron_2, data=x_train, mtry=10, ntree=500)
plot(rf_model, main="MCE vs. Number of Trees")
legend("topright", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
# Get the confusion matrix
print(rf_model)
rf_model.predict <- predict(rf_model, x_test, prob=TRUE)
rf_model.predict
rf_model.predict
x_test
print(rf_model)
rf_model.predict <- predict(rf_model, x_test, type="response")
rf_model.predict
rf_model
x_test
rf_model
rf_model.predict
rf_model.predict <- predict(rf_model, x_test, type="response")
rf_model.predict
rf_model$mse
rf_model$oob.times
names(rf_model)
rf_model$err.rate
names(rf_model)
predict(rf_model, x_test)
x_test
predict(rf_model, x_test)
x_test
dim(x_test)
predict(rf_model, x_test[1])
x_test[1]
x_test[1]
View(x_test[1])
predict(rf_model, x_test[1, ])
predict(rf_model, x_test[1, ])
predict(rf_model, x_test[2, ])
predict(rf_model, x_test[1:1000, ])
predict(rf_model, x_test[1:2, ])
predict(rf_model, x_test)
rf_predict <- predict(rf_model, x_test)
rf_predict <- predict(rf_model, x_test, prob=TRUE)
rf_predict
names(rf_predict)
rf_predict <- predict(rf_model, x_test, type='prob')
rf_predict
names(rf_predict)
View(rf_predict)
roc(y_test, rf_predict[, 2], plot=T)
print(rf_model)
MCE <- (129+133) / (923+133+129+815)
MCE
# Plot the Random Forest to see the optimal number of trees
plot(rf_model, main="MCE vs. Number of Trees")
legend("topright", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
# Plot the Random Forest to see the optimal number of trees
plot(rf_model, main="MCE vs. Number of Trees", xlab="Number of Trees", ylab="MCE")
legend("topright", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
plot(rf_model, main="MCE vs. Number of Trees", xlab="Number of Trees", ylab="MCE")
plot(rf_model, main="MCE vs. Number of Trees")
legend("topright", colnames(rf_model$err.rate),col=1:4,cex=0.8,fill=1:4)
roc(y_test, rf_predict[, 2], plot=T)
importance(rf_model)
MCE
roc(y_test, rf_predict[, 2], plot=T)
